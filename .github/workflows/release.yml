name: Release Automation

on:
  push:
    branches: [main]

jobs:
  release:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'chore(release)')"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release
          npm install -g @semantic-release/changelog
          npm install -g @semantic-release/git
          npm install -g @semantic-release/github

      - name: Create .releaserc.json
        run: |
          cat > .releaserc.json << EOF
          {
            "branches": ["main"],
            "plugins": [
              "@semantic-release/commit-analyzer",
              "@semantic-release/release-notes-generator",
              "@semantic-release/changelog",
              [
                "@semantic-release/git",
                {
                  "assets": ["CHANGELOG.md", "package.json"],
                  "message": "chore(release): \${nextRelease.version} [skip ci]\n\n\${nextRelease.notes}"
                }
              ],
              "@semantic-release/github"
            ],
            "preset": "conventionalcommits",
            "releaseRules": [
              { "type": "feat", "release": "minor" },
              { "type": "fix", "release": "patch" },
              { "type": "docs", "release": "patch" },
              { "type": "style", "release": "patch" },
              { "type": "refactor", "release": "patch" },
              { "type": "perf", "release": "patch" },
              { "type": "test", "release": "patch" },
              { "type": "build", "release": "patch" },
              { "type": "ci", "release": "patch" },
              { "type": "chore", "release": false },
              { "type": "revert", "release": "patch" },
              { "breaking": true, "release": "major" }
            ],
            "parserOpts": {
              "noteKeywords": ["BREAKING CHANGE", "BREAKING CHANGES", "BREAKING"]
            }
          }
          EOF

      - name: Create package.json for versioning
        run: |
          cat > package.json << EOF
          {
            "name": "fastapi-backend",
            "version": "1.0.0",
            "description": "FastAPI Backend for Asiste App",
            "main": "userservice/app/main.py",
            "scripts": {
              "test": "pytest",
              "lint": "flake8 userservice/app/ && black --check userservice/app/ && isort --check-only userservice/app/"
            },
            "repository": {
              "type": "git",
              "url": "https://github.com/${{ github.repository }}.git"
            },
            "keywords": ["fastapi", "python", "backend", "api"],
            "author": "EPTI Development Team",
            "license": "MIT"
          }
          EOF

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

  docker-release:
    runs-on: ubuntu-latest
    needs: release
    if: "contains(github.event.head_commit.message, 'chore(release)')"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract version from commit message
        id: extract_version
        run: |
          VERSION=$(echo "${{ github.event.head_commit.message }}" | grep -oP 'chore\(release\): \K[0-9]+\.[0-9]+\.[0-9]+')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build and tag Docker image
        run: |
          docker build -t fastapi-backend:latest ./userservice
          docker tag fastapi-backend:latest fastapi-backend:${{ steps.extract_version.outputs.version }}

      - name: Save Docker image as artifact
        run: |
          docker save fastapi-backend:${{ steps.extract_version.outputs.version }} | gzip > fastapi-backend-${{ steps.extract_version.outputs.version }}.tar.gz

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ steps.extract_version.outputs.version }}
          path: fastapi-backend-${{ steps.extract_version.outputs.version }}.tar.gz
          retention-days: 30
